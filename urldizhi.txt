http://26.47.121.205:9090/modulecmd/projects

http://26.47.121.205:9090/modulecmd/GetRootSubjects


http://26.47.121.205:9090/modulecmd/GetRootSubjects?sbjID=89


public void SendMsg(string spotId, string spotParam, bool clear)


public ActionResult GetChilrenSubjects(string sbjID)


/*
 * Copyright © SYIT. 2012, 2015. All Rights Reserved
 * Author: 郭晓川
 * Version: 1.0
 * Modification history:
 * 1. 2014年-6月-25日 郭晓川 Created
 */
using CmdServices.WebUI.CmdMgr;
using CmdServices.WebUI.DAO;
using CmdServices.WebUI.Models;
using Com.Dlxx.Cmd.Entity;
using log4net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Web;
using System.Web.Mvc;
using System.Xml.Linq;
using CmdServices.WebUI.Utility;
using System.Web.Routing;
using System.Web.Script.Serialization;
using System.Net;
using Com.Dlxx.DataAgent.Client;

namespace CmdServices.WebUI.Controllers
{
    [OutputCache(NoStore = true, Duration = 0)]
    [ValidateInput(false)]   //禁止对客户端请求消息的验证(特殊字符)
    public class ModuleCmdController : Controller
    {
        #region 字段声明

        /// <summary>
        ///   log
        /// </summary>
        private readonly ILog m_log = LogManager.GetLogger(typeof(ModuleCmdController));

        #endregion

        #region 属性声明

        /// <summary>
        /// 
        /// </summary>
        ModuleCmdManager m_cmdMgr = new ModuleCmdManager("");

        #endregion

        #region 构造函数

        #endregion

        #region 重写基类方法

        #endregion

        #region 接口实现

        #endregion

        #region 公共方法

        /// <summary>
        /// json格式返回项目信息
        /// </summary>
        /// <returns></returns>
        public ActionResult Projects()
        {
            MvcApplication.Projects = ControlDao.QueryProjects();
            return Json(MvcApplication.Projects, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 刷新项目信息
        /// </summary>
        public void RefreshProjectInfo()
        {
            MvcApplication.Projects = ControlDao.QueryProjects();
        }

        public string GetCurrentProj()
        {
            return MvcApplication.CurProject.Code;
        }

        //<msg>
        //    <src>mobile</src>
        //    <dst>Agent</dst>
        //    <type>SWICH_PRO</type> <!-- 表示从Agent处轮询获取指令 -->
        //    <pro>jssd</pro>
        //</msg>
        public void SwitchProj(string groupName)
        {
            m_log.InfoFormat("The target projName is {0}", MvcApplication.CurProject.Code);
            MvcApplication.ScenePlanMgr.TerminateScenePlan();
            m_cmdMgr.SwitchPro(groupName);
        }

        /// <summary>
        /// 以json格式返回某项目下的跟主题信息
        /// </summary>
        /// <param name="groupName"></param>
        /// <returns></returns>
        public ActionResult GetRootSubjects()
        {
            ControlDao controlDao = new ControlDao(MvcApplication.CurProject.Code);
            return Json(controlDao.QueryPSubjects(), JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// 获取某个主题下的子主题。
        /// </summary>
        /// <param name="sbjID"></param>
        /// <returns></returns>
        public ActionResult GetChilrenSubjects(string sbjID)
        {
            if (string.IsNullOrEmpty(sbjID))
            {
                return null;
            }
            return Json(m_cmdMgr.ControlDao.QueryChildrenSubjects(Convert.ToInt32(sbjID)), JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// 获取某个主题下的场景的基本信息。
        /// </summary>
        /// <param name="sbjID"></param>
        /// <returns></returns>
        public ActionResult GetScenes(string sbjID)
        {
            if (string.IsNullOrEmpty(sbjID))
            {
                return null;
            }

            List<Spot> scenes = m_cmdMgr.ControlDao.QuerySpots(sbjID);
            for (int i = 0; i < scenes.Count; i++)
            {
                scenes[i].SNAP_SHOT = null;
                if (!string.IsNullOrEmpty(scenes[i].SPOT_DESC))
                {
                    scenes[i].SPOT_DESC = Convert.ToBase64String(Encoding.UTF8.GetBytes(scenes[i].SPOT_DESC));
                }

                if (!string.IsNullOrEmpty(scenes[i].ActionsSequence))
                {
                    scenes[i].ActionsSequence = "";
                    //scenes[i].ActionsSequence = Convert.ToBase64String(Encoding.UTF8.GetBytes(scenes[i].ActionsSequence));
                }
            }

            return new ContentResult
            {
                Content = new JavaScriptSerializer { MaxJsonLength = Int32.MaxValue }.Serialize(scenes),
                ContentType = "appplication/json"
            };
        }

        /// <summary>
        /// 获取某个场景下动作序列
        /// </summary>
        /// <param name="sceneID"></param>
        /// <returns></returns>
        public ActionResult GetSceneActions(string sceneID)
        {
            List<SceneAction> actions = new List<SceneAction>();
            Spot scene = m_cmdMgr.ControlDao.QuerySpot(sceneID);

            if (scene != null && !string.IsNullOrEmpty(scene.ActionsSequence))
            {
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(scene.ActionsSequence);

                XmlNodeList list = doc.SelectNodes("actionSequnceDefine/action");
                for (int i = 0; i < list.Count; i++)
                {
                    XmlNode node = list[i];
                    string actionType = node.Attributes["actionType"].Value;
                    string name = node.Attributes["name"].Value;
                    if (actionType == "mousepress")
                    {
                        string px = node.Attributes["x"].Value;
                        string py = node.Attributes["y"].Value;

                        actions.Add(new SceneAction()
                        {
                            Screen = scene.SCREEN,
                            ActionType = actionType,
                            Name = name,
                            Px = px,
                            Py = py,
                            Key = ""
                        });
                    }
                    else if (actionType == "keypress")
                    {
                        actions.Add(new SceneAction()
                        {
                            Screen = scene.SCREEN,
                            ActionType = actionType,
                            Name = name,
                            Key = "",
                            Px = "",
                            Py = ""
                        });
                    }
                }

            }
            return Json(actions);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="controllerName"></param>
        /// <param name="planName"></param>
        [CmdServices.WebUI.Filter.FilterSession]
        [CmdServices.WebUI.Filter.CheckCurProject]
        public void CallPreplan(string controllerName, string planName)
        {
            try
            {
                m_log.InfoFormat("CallPreplan => The request pro is {0},controllerName is {1},the planName is {2}", MvcApplication.CurProject.Code, controllerName, planName);
                m_cmdMgr.SendPrePlanMessage(planName);
            }
            catch (Exception Ex)
            {
                m_log.ErrorFormat("CallPreplan Error : {0}", Ex.Message);
            }


        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="spotId"></param>
        /// <param name="spotParam"></param>
        /// <param name="clear"></param>
        [CmdServices.WebUI.Filter.FilterSession]
        [CmdServices.WebUI.Filter.CheckCurProject]
        public void SendMsg(string spotId, string spotParam, bool clear)
        {
            try
            {
                m_log.InfoFormat("SendMsg => The request pro is {0},spotId is {1},the spotParam is {2},clear={3},AppPro is {4}", MvcApplication.CurProject.Code, spotId, spotParam, clear, AppProject.Instance().ProjectCode);
                m_cmdMgr.SendMessage(spotId, spotParam, clear);
                var uName = Session["User"];
                if(uName!=null)
                {
                    string name = uName.ToString();
                    string cIp = CmdServices.WebUI.Utility.HttpUtility.GetClientIPv4();
                    ControlDao.WriteLog(name, cIp, "switchScene", string.Format("切换场景 {0}", spotId), "");
                }
            }
            catch (Exception Ex)
            {
                m_log.ErrorFormat("SendMsg Error : {0}， The request pro is {1},spotId is {2},the spotParam is {3},clear={4}， AppPro is {5}", Ex.Message, MvcApplication.CurProject.Code, spotId, spotParam, clear, AppProject.Instance().ProjectCode);
            }
        }

        #region 场景预案

        public ActionResult getScenePlans()
        {
            return Json(m_cmdMgr.ControlDao.SencePlanList(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult getPlanScenes(string planid)
        {
            return Json(m_cmdMgr.ControlDao.QueryPlanScenes(planid), JsonRequestBehavior.AllowGet);
        }
        [CmdServices.WebUI.Filter.FilterSession]
        [CmdServices.WebUI.Filter.CheckCurProject]
        public void SencePlan_loop(string id)
        {
            MvcApplication.ScenePlanMgr.ExecuteScenePlan(m_cmdMgr, id);
        }

        [CmdServices.WebUI.Filter.FilterSession]
        [CmdServices.WebUI.Filter.CheckCurProject]
        public void SendMsgWithAudio(int plan_id, string spotId, string spotParam, bool clear)
        {
            m_log.InfoFormat("SendMsgWithAudio => The request pro is {0},spotId is {1},the spotParam is {2},clear={3}", MvcApplication.CurProject.Code, spotId, spotParam, clear);
            m_cmdMgr.SendMessage(plan_id, spotId, spotParam, clear, true);
        }


        public void ControlVolume(string strCmd)
        {
            if (strCmd == "play") //播放
            {
                MvcApplication.ScenePlanMgr.PlayScenePlan();
                SendAudioMsg("play", "");
            }
            else if (strCmd == "pause") //暂停
            {
                MvcApplication.ScenePlanMgr.PauseScenePlan();
                SendAudioMsg("pause", "");
            }
            else if (strCmd == "pre") //上一个
            {
                MvcApplication.ScenePlanMgr.ToPrevious();
            }
            else if (strCmd == "next") //下一个
            {
                MvcApplication.ScenePlanMgr.ToNext();
            }


        }


        /// <summary>
        /// 发送音频控制信息(仅限Schedule内置音频处理)
        /// </summary>
        /// <param name="strCmd">
        ///  PLAY：播放  对应cmdParam的值为音频路径
        ///  STOP：停止  对应cmdParam的值为空串
        ///  PAUSE：暂停  对应cmdParam的值为空串
        ///  VOLUME：音量  对应cmdParam的值为目标音量值
        ///  PREV：上一曲  对应cmdParam的值为空串
        ///  PREV：下一曲  对应cmdParam的值为空串
        /// </param>
        /// <param name="cmdParam"></param>
        public void SendAudioMsg(string strCmd, string cmdParam)
        {
            m_log.InfoFormat("SendMsgWithAudio => The request pro is {0},strCmd is {1},the cmdParam is {2}", MvcApplication.CurProject.Code, strCmd, cmdParam);
            m_cmdMgr.SendAudioMsg(strCmd, cmdParam);
        }

        #endregion

        /// <summary>
        /// http地址= http://xxx.xxx.xxx.xxx:xxx/ModuleCmd/RedirectMessage
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        [CmdServices.WebUI.Filter.FilterSession]
        [CmdServices.WebUI.Filter.CheckCurProject]
        public void RedirectMessage(string msg)
        {
            try
            {
                m_log.InfoFormat("RedirectMessage=> The request pro is {0},the msg is {1}", MvcApplication.CurProject.Code, msg);
                m_cmdMgr.RedirectMessage(msg);
            }
            catch (Exception Ex)
            {
                m_log.ErrorFormat("RedirectMessage Error : {0}", Ex.Message);
            }
        }


        /// <summary>
        /// 获取场景缩略图
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        public ActionResult GetImg(string spotId)
        {
            if (string.IsNullOrEmpty(spotId))
            {
                return null;
            }
            return Json(m_cmdMgr.ControlDao.GetSpotImg(spotId), JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// 获取场景缩略图
        /// </summary>
        /// <param name="id"></param>
        /// <param name="msg"></param>
        public ActionResult GetSceneCtlUrl(string sceneId)
        {
            if (string.IsNullOrEmpty(sceneId))
            {
                return null;
            }
            return Json(m_cmdMgr.ControlDao.GetSceneCtlUrl(sceneId), JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// 以json格式返回当前项目的终端设备Ip
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult GetSlaves(string id)
        {
            return Json(m_cmdMgr.ControlDao.QueryAppAndSlaves(), JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 获取所有台风信息
        /// </summary>
        /// <returns></returns>
        public ActionResult GetTyphoonInfo()
        {
            MvcApplication.STyphooninfos = m_cmdMgr.ControlDao.GetAllTyphoon().FindAll(it => it.TyphoonTime.Year > 2010);

            var filtered = from typ in MvcApplication.STyphooninfos
                           group typ by Convert.ToString(typ.TyphoonTime.Year) into typGroup
                           where typGroup.Count() > 0
                           select typGroup;
            return Json(filtered, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 或取某年的所有台风信息
        /// </summary>
        /// <param name="year"></param>
        /// <param name="spotid"></param>
        /// <returns></returns>
        public ActionResult GetTyphoonDetail(string year, string spotid)
        {
            if (!Request.IsAjaxRequest())
            {
                var typhoons = from typ in MvcApplication.STyphooninfos
                               where Convert.ToString(typ.TyphoonTime.Year).Equals(year)
                               select new { id = typ.TyphoonID, name = typ.TyphoonCName == null ? typ.TyphoonEName : typ.TyphoonCName };

                return Json(typhoons, JsonRequestBehavior.AllowGet);
            }
            else
            {

                ListTyphoonViewModel model = new ListTyphoonViewModel();
                model.AllTyphoon = MvcApplication.STyphooninfos.FindAll(it => Convert.ToString(it.TyphoonTime.Year) == year);

                //获取关联场景ID列表
                List<string> refSpotIds = m_cmdMgr.ControlDao.GetFirstRelatedSpotId(spotid);
                StringBuilder strBuilder = new StringBuilder();
                for (int i = 0; i < refSpotIds.Count; i++)
                {
                    strBuilder.Append(refSpotIds[i]);
                    strBuilder.Append("|");
                }
                ViewData.Add("refids", (strBuilder.ToString()).TrimEnd('|'));
                ViewData.Add("spotid", spotid);

                return View(model);
            }

        }


        #region 场景动作序列处理方法。


        /// <summary>
        /// 获取某个场景下的所有动作。
        /// </summary>
        /// <param name="sceneid">场景id</param>
        /// <returns></returns>
        public ActionResult GetAllActions(string sceneid)
        {
            List<SceneAction> actions = new List<SceneAction>();
            try
            {
                Spot scene = m_cmdMgr.ControlDao.QuerySpot(sceneid);
                if (scene != null && !string.IsNullOrEmpty(scene.ActionsSequence))
                {
                    XmlDocument doc = new XmlDocument();
                    doc.LoadXml(scene.ActionsSequence);

                    XmlNodeList list = doc.SelectNodes("actionSequnceDefine/action");
                    for (int i = 0; i < list.Count; i++)
                    {
                        XmlNode node = list[i];
                        string actionType = node.Attributes["actionType"].Value;
                        string name = node.Attributes["name"].Value;
                        if (actionType == "mousepress")
                        {
                            string px = node.Attributes["x"].Value;
                            string py = node.Attributes["y"].Value;

                            actions.Add(new SceneAction()
                            {
                                Screen = scene.SCREEN,
                                ActionType = actionType,
                                Name = name,
                                Px = px,
                                Py = py,
                                Key = ""
                            });
                        }
                        else if (actionType == "keypress")
                        {
                            actions.Add(new SceneAction()
                            {
                                Screen = scene.SCREEN,
                                ActionType = actionType,
                                Name = name,
                                Key = "",
                                Px = "",
                                Py = ""
                            });
                        }
                    }

                }
            }
            catch (Exception Ex)
            {
                m_log.Error(Ex);
            }

            return Json(actions);
        }

        public void SendMousePressMsg(string screen, string x, string y)
        {
            m_cmdMgr.SendAcitonSeqMsg("0", screen, x, y);
        }

        public void SendKeyDownMsg(string screen, string key)
        {
            m_cmdMgr.SendAcitonSeqMsg("1", screen, key);
        }

        public void SendCallScriptFunMsg(string funName)
        {
            m_cmdMgr.SendCallScriptFunMsg(funName);
        }

        public void SendCallScriptFunMsgWithScreen(string screen, string funName)
        {
            m_cmdMgr.SendCallScriptFunMsg(screen, funName);
        }

        #endregion


        #region 身份验证

        public ActionResult validUser(string name, string password)
        {
            Login login = ControlDao.QueryLogin(name);
            if (login.ID == 0)
            {
                return Json(new ErrorEntity
                {
                    ErrCode = "-1",
                    ErrMsg = "用户名或密码错误！"
                });
            }
            else
            {

                return Json(new ErrorEntity
                {
                    ErrCode = "0",
                    ErrMsg = "成功"
                });

            }
        }

        #endregion


        #region 应用程序控制(打开、关闭)

        public void StartSchedule()
        {
            m_cmdMgr.StartSchedule();
        }

        public void CloseSchedule()
        {
            m_cmdMgr.CloseSchedule();
        }

        public void CloseCrixalis()
        {
            m_cmdMgr.CloseCrixalis();
        }

        public void RestartDataServer()
        {
            try
            {
                ModuleCmdManager.RestartDataServer();
            }
            catch (Exception Ex)
            {
                m_log.ErrorFormat("重启数据服务失败: {0}", Ex.Message);
            }

        }

        public void RestartAll()
        {
            try
            {
                ModuleCmdManager.RestartAll();
            }
            catch (Exception Ex)
            {
                m_log.ErrorFormat("系统启动失败: {0}", Ex.Message);
            }

        }

        #endregion
        #endregion

        #region 私有方法

        #endregion

        #region 事件处理

        #endregion

    }
}
